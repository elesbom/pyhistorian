>>> from pyhistorian import *
>>> from should_dsl import DSLObject as _

>>> class NewScenario(Scenario):
...     @Given('I test it')
...     def i_test_it(self):
...         self.first_state = "it's been tested!"
...
...     @When('I say OK')
...     def i_say_ok(self):
...          self.second_state = 'I have said OK'
...
...     @Then("It's done")
...     def its_done(self):
...         print "It's done!"

>>> new_scenario = NewScenario('First Scenario')

>>> story = Story(as_a='programmer',
...               i_want_to='write this DSL',
...               so_that='I test this new stuff')
>>> story.add_scenario(new_scenario)

>>> story.run()
Story: Empty Story
As a programmer
I want to write this DSL
So that I test this new stuff
<BLANKLINE>
Scenario 1: First Scenario
  Given I test it
  When I say OK
  Then It's done
It's done!

>>> new_scenario.first_state
"it's been tested!"

>>> new_scenario.second_state
'I have said OK'


>>> class TemplateScenario(Scenario):
...     @Given('I have a calculator')
...     def i_have_a_calculator(self):
...         pass
...
...     @When('I sum 1 to 1')
...     def i_sum_number1_to_number2(self):
...         self.sum = 1 + 1
...
...     @Then('the result is 2')
...     def the_result_is_result(self):
...         _(self.sum).should_be.equal_to(2)

>>> template_scenario = TemplateScenario('Second Scenario')

>>> template_story = Story(title='Second Test',
...                        as_a='programmer',
...                        i_want_to='write a test',
...                        so_that='I can become happy')
>>> template_story.add_scenario(template_scenario)
>>> template_story.run()
Story: Second Test
As a programmer
I want to write a test
So that I can become happy
<BLANKLINE>
Scenario 1: Second Scenario
  Given I have a calculator
  When I sum 1 to 1
  Then the result is 2


>>> story = Story(title='Running two different scenarios',
...               as_a='programmer',
...               i_want_to='put two different scenarios in a story',
...               so_that='it run all right')
>>> story.add_scenario(new_scenario)
>>> story.add_scenario(template_scenario)
>>> story.run()
Story: Running two different scenarios
As a programmer
I want to put two different scenarios in a story
So that it run all right
<BLANKLINE>
Scenario 1: First Scenario
  Given I test it
  When I say OK
  Then It's done
It's done!
<BLANKLINE>
Scenario 2: Second Scenario
  Given I have a calculator
  When I sum 1 to 1
  Then the result is 2

>>> class ThirdScenario(Scenario):
...     @Given('it is the 3rd scenario')
...     def do_nothing(self):
...         pass
...
...     @When('I do nothing')
...     def do_nothing_again(self):
...         pass
...     @When("I don't know what to do")
...     def what_should_i_do(self):
...         self.what = 'write this software'
...
...     @Then('I go refactor this software')
...     def refactor(self):
...         pass
>>> third_scenario = ThirdScenario('It is my third scenario')

>>> story = Story(title='Showing how two whens become one when+and',
...               as_a='software developer',
...               i_want_to='improve my software',
...               so_that='everybody loves it')
>>> story.add_scenario(third_scenario)
>>> story.run()
Story: Showing how two whens become one when+and
As a software developer
I want to improve my software
So that everybody loves it
<BLANKLINE>
Scenario 1: It is my third scenario
  Given it is the 3rd scenario
  When I do nothing
  And I don't know what to do
  Then I go refactor this software

